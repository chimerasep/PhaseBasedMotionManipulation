#pragma kernel ProcessPyramidPhaseDifference

#define GROUP_SIZE_X 32
#define GROUP_SIZE_Y 32
#define PI 3.14159265359

// Input pyramid level textures (RG format - Real and Imaginary parts)
Texture2D<float4> _CurrentPyramidLevel;
Texture2D<float4> _PreviousPyramidLevel;

// Output texture (RG format - Real and Imaginary parts)
RWTexture2D<float4> _OutputPyramidLevel;

// Phase difference parameters
float _PhaseScale;
float _MagnitudeThreshold;
int _Width;
int _Height;

// Pyramid level info
int _CurrentLevel;
int _TotalLevels;
int _ProcessLevel; // 0 = don't process, 1 = process

// Complex number operations
float2 complex_multiply(float2 a, float2 b)
{
    return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float complex_magnitude(float2 z)
{
    return sqrt(z.x * z.x + z.y * z.y);
}

float complex_phase(float2 z)
{
    return atan2(z.y, z.x);
}

float2 complex_exp(float phase)
{
    return float2(cos(phase), sin(phase));
}

// Normalize phase to [-pi, pi] range
float normalize_phase(float phase)
{
    while (phase > PI)
        phase -= 2.0 * PI;
    while (phase < -PI)
        phase += 2.0 * PI;
    return phase;
}

// ... [Shader'ın üst kısmı aynı kalıyor] ...

[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, 1)]
void ProcessPyramidPhaseDifference(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)_Width || id.y >= (uint)_Height)
        return;
    
    // Read pyramid level values
    float4 currentLevel = _CurrentPyramidLevel[id.xy];
    float4 previousLevel = _PreviousPyramidLevel[id.xy];
    
    // Extract complex numbers (RG channels)
    float2 currentComplex = currentLevel.rg;
    float2 previousComplex = previousLevel.rg;
    
    // Check if this level should be processed
    if (_ProcessLevel == 0 || _CurrentLevel == 0 || _CurrentLevel == _TotalLevels - 1)
    {
        _OutputPyramidLevel[id.xy] = currentLevel;
        return;
    }
    
    float currentMagnitude = complex_magnitude(currentComplex);
    float previousMagnitude = complex_magnitude(previousComplex);
    
    if (currentMagnitude < _MagnitudeThreshold || previousMagnitude < _MagnitudeThreshold)
    {
        _OutputPyramidLevel[id.xy] = currentLevel;
        return;
    }
    
    float currentPhase = complex_phase(currentComplex);
    float previousPhase = complex_phase(previousComplex);
    
    // DÜZELTME: Faz farkı hesabı. Mevcut - önceki.
    float delta = normalize_phase(previousPhase - currentPhase);
    
    float modifiedPhaseDelta = delta * _PhaseScale;
    
    float2 expTerm = complex_exp(modifiedPhaseDelta);
    
    float2 modifiedComplex = complex_multiply(currentComplex, expTerm);
    
    _OutputPyramidLevel[id.xy] = float4(modifiedComplex.x, modifiedComplex.y, 0, 1);
}